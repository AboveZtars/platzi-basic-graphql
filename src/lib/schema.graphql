#### Level
enum Level {
  noob
  intermediate
  advance
}
#### Interfaces
interface Person {
  _id: ID! @column
  name: String! @column
  email: String! @column
}
#### Types
type Course @entity {
  _id: ID! @column
  title: String! @column
  teacher: String @column
  description: String! @column
  topic: String @column
  students: [Student] @column
  level: Level
}

type Student implements Person @entity {
  _id: ID! @column
  name: String! @column
  email: String! @column
  avatar: String @column
}

type Monitor implements Person @entity {
  _id: ID! @column
  name: String! @column
  email: String! @column
  phone: String @column
}
#### Inputs
## Courses
input CourseInput {
  title: String!
  teacher: String
  description: String!
  topic: String
  level: Level
}

input EditCourseInput {
  title: String
  teacher: String
  description: String
  topic: String
}
## Students
input PersonInput {
  name: String!
  email: String!
  avatar: String
  phone: String
}

input EditPersonInput {
  name: String
  email: String
  avatar: String
  phone: String
}
#### Queries and mutations
type Query {
  "Return courses"
  courses: [Course]
  course(id: ID!): Course
  "Return students"
  persons: [Person]
  person(id: ID!): Person
}
type Mutation {
  "Courses"
  createCourse(input: CourseInput!): Course
  editCourse(id: ID!, input: EditCourseInput!): Course
  deleteCourse(id: ID!): [Course]
  addStudent(courseId: ID!, personId: ID!): Course
  "Person"
  createPerson(input: PersonInput!): Person
  editPerson(id: ID!, input: EditPersonInput!): Person
  deletePerson(id: ID!): [Person]
}
